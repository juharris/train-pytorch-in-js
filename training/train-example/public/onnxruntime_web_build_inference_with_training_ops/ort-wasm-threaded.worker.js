/*!
 * ONNX Runtime Web v1.8.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var e={};function t(e,t){e||abort("Assertion failed: "+t)}var a=function(){var e=Array.prototype.slice.call(arguments).join(" ");console.error(e)};if(this.alert=function(){var t=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:t,threadId:e._pthread_self()})},e.instantiateWasm=function(t,a){var r=new WebAssembly.Instance(e.wasmModule,t);return e.wasmModule=null,a(r),r.exports},this.onmessage=function(r){try{if("load"===r.data.cmd){if(e.wasmModule=r.data.wasmModule,e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var o=URL.createObjectURL(r.data.urlOrBlob);importScripts(o),URL.revokeObjectURL(o)}ortWasmThreaded(e).then((function(t){e=t}))}else if("objectTransfer"===r.data.cmd)e.PThread.receiveObjectTransfer(r.data);else if("run"===r.data.cmd){e.__performance_now_clock_drift=performance.now()-r.data.time,e.__emscripten_thread_init(r.data.threadInfoStruct,0,0);var n=r.data.stackBase,s=r.data.stackBase+r.data.stackSize;t(r.data.threadInfoStruct),t(0!=s),t(0!=n),t(s>n),e.establishStackSpace(s,n),e._emscripten_tls_init(),e.PThread.receiveObjectTransfer(r.data),e.PThread.setThreadStatus(e._pthread_self(),1);try{var i=e.invokeEntryPoint(r.data.start_routine,r.data.arg);e.checkStackCookie(),e.getNoExitRuntime()||e.PThread.threadExit(i)}catch(t){if("Canceled!"===t)e.PThread.threadCancel();else if("unwind"!=t){if("function"!=typeof e._emscripten_futex_wake)throw a("Thread Initialisation failed."),t;if(!(t instanceof e.ExitStatus))throw e.PThread.threadExit(-2),t;e.getNoExitRuntime()?a("Pthread 0x"+e._pthread_self().toString(16)+" called exit(), staying alive due to noExitRuntime."):(a("Pthread 0x"+e._pthread_self().toString(16)+" called exit(), calling threadExit."),e.PThread.threadExit(t.status))}else a("Pthread 0x"+e._pthread_self().toString(16)+" completed its pthread main entry point with an unwind, keeping the pthread worker alive for asynchronous operation.")}}else"cancel"===r.data.cmd?e._pthread_self()&&e.PThread.threadCancel():"setimmediate"===r.data.target||("processThreadQueue"===r.data.cmd?e._pthread_self()&&e._emscripten_current_thread_process_queued_calls():(a("worker.js received unknown command "+r.data.cmd),a(r.data)))}catch(e){throw a("worker.js onmessage() captured an uncaught exception: "+e),e&&e.stack&&a(e.stack),e}},"object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node){self={location:{href:__filename}};var r=this.onmessage,o=require("worker_threads");global.Worker=o.Worker;var n=o.parentPort;n.on("message",(function(e){r({data:e})}));var s=require("fs");importScripts=function(t){var a,r;r=t,a=s.readFileSync(r,"utf8"),global.require=require,global.Module=e,eval.call(null,a)},postMessage=function(e){n.postMessage(e)},"undefined"==typeof performance&&(performance={now:function(){return Date.now()}})}

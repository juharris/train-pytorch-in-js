/*!
 * ONNX Runtime Web v1.12.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var e={};if("object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node){var t=require("worker_threads"),a=t.parentPort;a.on("message",(function(e){onmessage({data:e})}));var r=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:t.Worker,importScripts:function(e){(0,eval)(r.readFileSync(e,"utf8"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=function(){var e=Array.prototype.slice.call(arguments).join(" ");console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,a)=>{var r=new WebAssembly.Instance(e.wasmModule,t);return a(r),e.wasmModule=null,r.exports},self.onmessage=t=>{try{if("load"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var a=URL.createObjectURL(t.data.urlOrBlob);importScripts(a),URL.revokeObjectURL(a)}ortWasmThreaded(e).then((function(t){e=t}))}else if("run"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.threadInfoStruct,0,0,1),t.data.threadInfoStruct||abort("Assertion failed: "+undefined),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInit();try{var r=e.invokeEntryPoint(t.data.start_routine,t.data.arg);e.checkStackCookie(),e.keepRuntimeAlive()?e.PThread.setExitStatus(r):e.__emscripten_thread_exit(r)}catch(t){if("unwind"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()?o("Pthread 0x"+e._pthread_self().toString(16)+" called exit(), staying alive due to noExitRuntime."):(o("Pthread 0x"+e._pthread_self().toString(16)+" called exit(), calling _emscripten_thread_exit."),e.__emscripten_thread_exit(t.status))}else o("Pthread 0x"+e._pthread_self().toString(16)+" completed its main entry point with an `unwind`, keeping the worker alive for asynchronous operation.")}}else"cancel"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===t.data.target||("processThreadQueue"===t.data.cmd?e._pthread_self()&&e._emscripten_current_thread_process_queued_calls():(o("worker.js received unknown command "+t.data.cmd),o(t.data)))}catch(e){throw o("worker.js onmessage() captured an uncaught exception: "+e),e&&e.stack&&o(e.stack),e}};
